swagger: "2.0"
info:
  description: "REST API definition for EVENTually project, a simple user friendly event manager to host/manage all the events in hte the organization."
  version: "1.0.0"
  title: "EVENTually"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "sgorai@rbbn.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "petstore.swagger.io"
# basePath: "/v2"
tags:
- name: "event"
  description: "Operations on the events"
- name: "team"
  description: "Operations on the teams"
- name: "reward"
  description: "Operations on the rewards"
- name: "comment"
  description: "Operations on the comments"
- name: "subscription"
  description: "Operations on the subscriptions"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /event:
    get:
      tags:
      - "event"
      summary: "Get all the events"
      description: "Get all the events"
      operationId: "get_all_events"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Events"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    post:
      tags:
      - "event"
      summary: "Create a event"
      description: "Create a event"
      operationId: "create_event"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created evenet details"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /event/{eventid}:
    get:
      tags:
      - "event"
      summary: "Get event by id"
      description: "Get event by id"
      operationId: "get_event_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to fetch"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    put:
      tags:
      - "event"
      summary: "Modify event"
      description: "Modify event"
      operationId: "modify_event_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to modify"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: "ID of the event to modify"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    delete:
      tags:
      - "event"
      summary: "Delete event"
      description: "Delete event"
      operationId: "delete_event_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to delete"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /team:
    get:
      tags:
      - "team"
      summary: "Get all the teams"
      description: "Get all the teams"
      operationId: "get_all_teams"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Teams"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    post:
      tags:
      - "team"
      summary: "Create a team"
      description: "Create a team"
      operationId: "create_team"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created evenet details"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /team/{teamid}:
    get:
      tags:
      - "team"
      summary: "Get team by id"
      description: "Get team by id"
      operationId: "get_team_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamid"
        in: "path"
        description: "ID of the event to fetch"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    put:
      tags:
      - "team"
      summary: "Modify team"
      description: "Modify team"
      operationId: "modify_team_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamid"
        in: "path"
        description: "ID of the team to modify"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: "ID of the event to modify"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    delete:
      tags:
      - "team"
      summary: "Delete Team"
      description: "Delete team"
      operationId: "delete_team_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamid"
        in: "path"
        description: "ID of the event to delete"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /reward:
    get:
      tags:
      - "reward"
      summary: "Get all the rewards"
      description: "Get all the rewards"
      operationId: "get_all_rewards"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Rewards"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    post:
      tags:
      - "reward"
      summary: "Create a reward"
      description: "Create a reward"
      operationId: "create_reward"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created reward details"
        required: true
        schema:
          $ref: "#/definitions/Reward"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /reward/{rewardid}:
    get:
      tags:
      - "reward"
      summary: "Get reward by id"
      description: "Get reward by id"
      operationId: "get_reward_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "rewardid"
        in: "path"
        description: "ID of the reward to fetch"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    put:
      tags:
      - "reward"
      summary: "Modify reward"
      description: "Modify reward"
      operationId: "modify_reward_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "rewardid"
        in: "path"
        description: "ID of the reward to modify"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: "ID of the reward to modify"
        required: true
        schema:
          $ref: "#/definitions/Reward"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    delete:
      tags:
      - "reward"
      summary: "Delete Reward"
      description: "Delete reward"
      operationId: "delete_reward_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "rewardid"
        in: "path"
        description: "ID of the reward to delete"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /comment:
    get:
      tags:
      - "comment"
      summary: "Get all the comments"
      description: "Get all the comments"
      operationId: "get_all_comments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Comments"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    post:
      tags:
      - "comment"
      summary: "Create a comment"
      description: "Create a comment"
      operationId: "create_comment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created comment details"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /comment/{commentid}:
    get:
      tags:
      - "comment"
      summary: "Get comment by id"
      description: "Get comment by id"
      operationId: "get_comment_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "commentid"
        in: "path"
        description: "ID of the comment to fetch"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Comments"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    put:
      tags:
      - "comment"
      summary: "Modify comment"
      description: "Modify comment"
      operationId: "modify_comment_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "commentid"
        in: "path"
        description: "ID of the comment to modify"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: "ID of the comment to modify"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    delete:
      tags:
      - "comment"
      summary: "Delete comment"
      description: "Delete comment"
      operationId: "delete_comment_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "commentid"
        in: "path"
        description: "ID of the comment to delete"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /subscription:
    get:
      tags:
      - "subscription"
      summary: "Get all the subscriptions"
      description: "Get all the subscriptions"
      operationId: "get_all_subscriptions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Subscriptions"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    post:
      tags:
      - "subscription"
      summary: "Create a subscription"
      description: "Create a subscription"
      operationId: "create_subscription"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created subscription details"
        required: true
        schema:
          $ref: "#/definitions/Subscription"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Subscription"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /subscription/{subscriptionid}:
    get:
      tags:
      - "subscription"
      summary: "Get subscription by id"
      description: "Get subscription by id"
      operationId: "get_subscription_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionid"
        in: "path"
        description: "ID of the subscription to fetch"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Subscriptions"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    put:
      tags:
      - "subscription"
      summary: "Modify subscription"
      description: "Modify subscription"
      operationId: "modify_subscription_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionid"
        in: "path"
        description: "ID of the subscription to modify"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: "ID of the subscription to modify"
        required: true
        schema:
          $ref: "#/definitions/Subscription"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Subscription"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    delete:
      tags:
      - "subscription"
      summary: "Delete subscription"
      description: "Delete subscription"
      operationId: "delete_subscription_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionid"
        in: "path"
        description: "ID of the subscription to delete"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Subscription"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"

  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Info"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
  /user/{userid}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "get_user_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "modify_user_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Update user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"

definitions:
  Events:
    type: "array"
    items:
      $ref: "#/definitions/Event"
  Event:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"
      event_start_date:
        type: "string"
      event_end_date:
        type: "string"
      reg_start_date:
        type: "string"
      reg_end_date:
        type: "string"
      created_at:
        type: "string"
      max_user:
        type: "integer"
        format: "int32"
      min_user:
        type: "integer"
        format: "int32"
      location:
        type: "string"
      accept_file_type:
        type: "string"
      accept_video_file:
        type: "boolean"
    required:
      - id
      - title
      - description
      - event_start_date
      - event_end_date
      - reg_start_date
      - reg_end_date
  Teams:
    type: "array"
    items:
      $ref: "#/definitions/Team"
  Team:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      event_id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      reward_id:
        type: "integer"
        format: "int32"
      user_ids:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      lead_user_id:
        type: "integer"
        format: "int32"

  Rewards:
    type: "array"
    items:
      $ref: "#/definitions/Reward"
  Reward:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      event_id:
        type: "integer"
        format: "int64"
      amount:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      position:
        type: "integer"
        format: "int64"
  Comments:
    type: "array"
    items:
      $ref: "#/definitions/Comment"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      comment:
        type: "string"
      commented_at:
        type: "string"
      user_id:
        type: "integer"
        format: "int64"
      submission_id:
        type: "integer"
        format: "int64"
      rating:
        type: "integer"
        format: "int64"
  Subscriptions:
    type: "array"
    items:
      $ref: "#/definitions/Subscription"
  Subscription:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      event_id:
        type: "integer"
        format: "int64"
  Submissions:
    type: "array"
    items:
      $ref: "#/definitions/Submission"
  Submission:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      event_id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      team_id:
        type: "integer"
        format: "int32"
      location:
        type: "string"
      video_file:
        type: "string"
      submitted_at:
        type: "string"
      views:
        type: "integer"
        format: "int32"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Info:
    type: "object"
    properties:
      critical:
        $ref: "#/definitions/Info_critical"
      error:
        $ref: "#/definitions/Info_error"
      warning:
        $ref: "#/definitions/Info_warning"
      info:
        $ref: "#/definitions/Info_info"
    description: "Contains information about the request which could include warnings,\
      \ error messages, and information about any side effects of some operations\
      \ such as which dashboards were added or removed.\n"
  Info_critical:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains information about a critical error that has occurred that\
      \ could affect the availability of the service.\n"
  Info_error:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains information about a error that has occurred during the\
      \ execution of the requested operation.\n"
  Info_warning:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains information that does not affect the results of the requested\
      \ operation but which is out of the ordinary and may require user action or\
      \ investigation. For example, a warning could be used to identify the use of\
      \ deprecated REST API calls.\n"
  Info_info:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains details of the requested operation that would be of interest\
      \ to the user. For example, it could include a list of items that have been\
      \ deleted when a containing object is deleted.\n"
  # ApiResponse:
  #   type: "object"
  #   properties:
  #     code:
  #       type: "integer"
  #       format: "int32"
  #     type:
  #       type: "string"
  #     message:
  #       type: "string"
