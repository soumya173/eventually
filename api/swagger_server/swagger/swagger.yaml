---
swagger: "2.0"
info:
  description: "REST API definition for EVENTually project, a simple user friendly\
    \ event manager to host/manage all the events in hte the organization."
  version: "1.0.0"
  title: "EVENTually"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "sgorai@rbbn.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "event"
  description: "Operations on the events"
- name: "team"
  description: "Operations on the teams"
- name: "reward"
  description: "Operations on the rewards"
- name: "comment"
  description: "Operations on the comments"
- name: "subscription"
  description: "Operations on the subscriptions"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /event:
    get:
      tags:
      - "event"
      summary: "Get all the events"
      description: "Get all the events"
      operationId: "get_all_events"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
    post:
      tags:
      - "event"
      summary: "Create a event"
      description: "Create a event"
      operationId: "create_event"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created evenet details"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /event/search/{keyword}:
    get:
      tags:
      - "event"
      summary: "Search events by keyword"
      description: "Search events by keyword"
      operationId: "search_events_by_keyword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "keyword"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /event/{eventid}/teams:
    get:
      tags:
      - "event"
      summary: "Get teams by id"
      description: "Get teams by id"
      operationId: "get_teams_by_eveid"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Teams"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /event/subscribed/{user_id}:
    get:
      tags:
      - "event"
      summary: "Get subscribed event"
      description: "Get subscribed event"
      operationId: "get_subscribed_event"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /event/upcoming:
    get:
      tags:
      - "event"
      summary: "Get upcoming event"
      description: "Get upcoming event"
      operationId: "get_upcoming_event"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /event/active:
    get:
      tags:
      - "event"
      summary: "Get active event"
      description: "Get active event"
      operationId: "get_active_event"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /event/{eventid}:
    get:
      tags:
      - "event"
      summary: "Get event by id"
      description: "Get event by id"
      operationId: "get_event_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
    put:
      tags:
      - "event"
      summary: "Modify event"
      description: "Modify event"
      operationId: "modify_event_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to modify"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "ID of the event to modify"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
    delete:
      tags:
      - "event"
      summary: "Delete event"
      description: "Delete event"
      operationId: "delete_event_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /team:
    get:
      tags:
      - "team"
      summary: "Get all the teams"
      description: "Get all the teams"
      operationId: "get_all_teams"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Teams"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.team_controller"
    post:
      tags:
      - "team"
      summary: "Create a team"
      description: "Create a team"
      operationId: "create_team"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created evenet details"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.team_controller"
  /team/{teamid}:
    get:
      tags:
      - "team"
      summary: "Get team by id"
      description: "Get team by id"
      operationId: "get_team_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamid"
        in: "path"
        description: "ID of the event to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.team_controller"
    put:
      tags:
      - "team"
      summary: "Modify team"
      description: "Modify team"
      operationId: "modify_team_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamid"
        in: "path"
        description: "ID of the team to modify"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "ID of the event to modify"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.team_controller"
    delete:
      tags:
      - "team"
      summary: "Delete Team"
      description: "Delete team"
      operationId: "delete_team_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamid"
        in: "path"
        description: "ID of the event to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Team"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.team_controller"
  /reward:
    get:
      tags:
      - "reward"
      summary: "Get all the rewards"
      description: "Get all the rewards"
      operationId: "get_all_rewards"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Rewards"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.reward_controller"
    post:
      tags:
      - "reward"
      summary: "Create a reward"
      description: "Create a reward"
      operationId: "create_reward"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created reward details"
        required: true
        schema:
          $ref: "#/definitions/Reward"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.reward_controller"
  /reward/event/{eventid}:
    get:
      tags:
      - "reward"
      summary: "Get reward by event id"
      description: "Get reward by event id"
      operationId: "get_reward_by_event_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventid"
        in: "path"
        description: "ID of the event to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Rewards"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.reward_controller"
  /reward/{rewardid}:
    get:
      tags:
      - "reward"
      summary: "Get reward by id"
      description: "Get reward by id"
      operationId: "get_reward_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "rewardid"
        in: "path"
        description: "ID of the reward to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.reward_controller"
    put:
      tags:
      - "reward"
      summary: "Modify reward"
      description: "Modify reward"
      operationId: "modify_reward_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "rewardid"
        in: "path"
        description: "ID of the reward to modify"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "ID of the reward to modify"
        required: true
        schema:
          $ref: "#/definitions/Reward"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.reward_controller"
    delete:
      tags:
      - "reward"
      summary: "Delete Reward"
      description: "Delete reward"
      operationId: "delete_reward_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "rewardid"
        in: "path"
        description: "ID of the reward to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Reward"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.reward_controller"
  /comment:
    get:
      tags:
      - "comment"
      summary: "Get all the comments"
      description: "Get all the comments"
      operationId: "get_all_comments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comments"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.comment_controller"
    post:
      tags:
      - "comment"
      summary: "Create a comment"
      description: "Create a comment"
      operationId: "create_comment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created comment details"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.comment_controller"
  /comment/{commentid}:
    get:
      tags:
      - "comment"
      summary: "Get comment by id"
      description: "Get comment by id"
      operationId: "get_comment_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "commentid"
        in: "path"
        description: "ID of the comment to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comments"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.comment_controller"
    put:
      tags:
      - "comment"
      summary: "Modify comment"
      description: "Modify comment"
      operationId: "modify_comment_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "commentid"
        in: "path"
        description: "ID of the comment to modify"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "ID of the comment to modify"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.comment_controller"
    delete:
      tags:
      - "comment"
      summary: "Delete comment"
      description: "Delete comment"
      operationId: "delete_comment_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "commentid"
        in: "path"
        description: "ID of the comment to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.comment_controller"
  /subscription:
    get:
      tags:
      - "subscription"
      summary: "Get all the subscriptions"
      description: "Get all the subscriptions"
      operationId: "get_all_subscriptions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Subscriptions"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.subscription_controller"
    post:
      tags:
      - "subscription"
      summary: "Create a subscription"
      description: "Create a subscription"
      operationId: "create_subscription"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created subscription details"
        required: true
        schema:
          $ref: "#/definitions/Subscription"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Subscription"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.subscription_controller"
  /subscription/{subscriptionid}:
    get:
      tags:
      - "subscription"
      summary: "Get subscription by id"
      description: "Get subscription by id"
      operationId: "get_subscription_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionid"
        in: "path"
        description: "ID of the subscription to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Subscriptions"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.subscription_controller"
    put:
      tags:
      - "subscription"
      summary: "Modify subscription"
      description: "Modify subscription"
      operationId: "modify_subscription_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionid"
        in: "path"
        description: "ID of the subscription to modify"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "ID of the subscription to modify"
        required: true
        schema:
          $ref: "#/definitions/Subscription"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Subscription"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.subscription_controller"
    delete:
      tags:
      - "subscription"
      summary: "Delete subscription"
      description: "Delete subscription"
      operationId: "delete_subscription_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionid"
        in: "path"
        description: "ID of the subscription to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Subscription"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.subscription_controller"
  /submission:
    get:
      tags:
      - "submission"
      summary: "Get all the submissions"
      description: "Get all the submissions"
      operationId: "get_all_submissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submissions"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
    post:
      tags:
      - "submission"
      summary: "Create a submission"
      description: "Create a submission"
      operationId: "create_submission"
      consumes:
      - "multipart/form-data"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created submission details"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submission"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
  /submission/{submissionid}:
    get:
      tags:
      - "submission"
      summary: "Get submission by id"
      description: "Get submission by id"
      operationId: "get_submission_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionid"
        in: "path"
        description: "ID of the submission to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submission"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
    put:
      tags:
      - "submission"
      summary: "Modify submission"
      description: "Modify submission"
      operationId: "modify_submission_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionid"
        in: "path"
        description: "ID of the submission to modify"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "ID of the submission to modify"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submission"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
    delete:
      tags:
      - "submission"
      summary: "Delete submission"
      description: "Delete submission"
      operationId: "delete_submission_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionid"
        in: "path"
        description: "ID of the submission to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submission"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
  /submission/{submissionid}/files:
    get:
      tags:
      - "submission"
      - "download"
      summary: "Download submission by id"
      description: "Download submission by id"
      operationId: "download_submission_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "submissionid"
        in: "path"
        description: "ID of the submission to fetch"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submission"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
    post:
      tags:
      - "submission"
      - "upload"
      summary: "Upload a submission file"
      description: "Upload a  submission file"
      operationId: "upload_submission_file_by_id"
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "submissionid"
        in: "path"
        description: "ID of the submission to modify"
        required: true
        type: "integer"
      - name: "datafile"
        in: "formData"
        description: "Submission File"
        required: true
        type: "file"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Info"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
    delete:
      tags:
      - "submission"
      summary: "Delete submitted file"
      description: "Delete submitted file by id"
      operationId: "delete_submitted_file_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionid"
        in: "path"
        description: "ID of the submitted file to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Info"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.submission_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Username and password"
        required: true
        schema:
          $ref: "#/definitions/Login_details"
      responses:
        "200":
          description: "Successfully logged in"
        "400":
          description: "Bad Request"
        "500":
          description: "Server Error"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout/{userid}:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "logout_user"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "Username that needs to be logged out."
        required: true
        type: "integer"
      responses:
        "200":
          description: "Successfully user logged out"
        "400":
          description: "Bad Request"
        "500":
          description: "Server Error"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/{userid}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "get_user_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "modify_user_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Update user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
definitions:
  Events:
    type: "array"
    items:
      $ref: "#/definitions/Event"
  Login_details:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      password:
        type: "string"
    example:
      username: "username"
      password: "password"
  Event:
    type: "object"
    required:
    - "description"
    - "max_user"
    - "min_user"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"
      event_start_date:
        type: "string"
      event_end_date:
        type: "string"
      reg_start_date:
        type: "string"
      reg_end_date:
        type: "string"
      created_at:
        type: "string"
      max_user:
        type: "integer"
        format: "int32"
      min_user:
        type: "integer"
        format: "int32"
      location:
        type: "string"
      accept_file_type:
        type: "string"
      accept_video_file:
        type: "boolean"
    example:
      reg_end_date: "reg_end_date"
      event_end_date: "event_end_date"
      description: "description"
      created_at: "created_at"
      title: "title"
      accept_video_file: true
      min_user: 1
      max_user: 6
      reg_start_date: "reg_start_date"
      location: "location"
      id: 0
      accept_file_type: "accept_file_type"
      event_start_date: "event_start_date"
  Teams:
    type: "array"
    items:
      $ref: "#/definitions/Team"
  Team:
    type: "object"
    required:
    - "event_id"
    - "lead_user_id"
    - "name"
    - "type"
    - "user_ids"
    properties:
      id:
        type: "integer"
        format: "int64"
      event_id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      reward_id:
        type: "integer"
        format: "int32"
      user_ids:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      lead_user_id:
        type: "integer"
        format: "int32"
      type:
        type: "string"
        enum:
        - "judge"
        - "participant"
    example:
      event_id: 6
      user_ids:
      - 5
      - 5
      name: "name"
      reward_id: 1
      lead_user_id: 5
      id: 0
      type: "judge"
  Rewards:
    type: "array"
    items:
      $ref: "#/definitions/Reward"
  Reward:
    type: "object"
    required:
    - "event_id"
    - "position"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      event_id:
        type: "integer"
        format: "int64"
      amount:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      position:
        type: "integer"
        format: "int64"
    example:
      amount: 1
      event_id: 6
      id: 0
      position: 5
      title: "title"
      type: "type"
  Comments:
    type: "array"
    items:
      $ref: "#/definitions/Comment"
  Comment:
    type: "object"
    required:
    - "submission_id"
    - "user_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      comment:
        type: "string"
      commented_at:
        type: "string"
      user_id:
        type: "integer"
        format: "int64"
      submission_id:
        type: "integer"
        format: "int64"
      rating:
        type: "integer"
        format: "int64"
    example:
      submission_id: 1
      user_id: 6
      rating: 5
      comment: "comment"
      id: 0
      commented_at: "commented_at"
  Subscriptions:
    type: "array"
    items:
      $ref: "#/definitions/Subscription"
  Subscription:
    type: "object"
    required:
    - "event_id"
    - "user_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      event_id:
        type: "integer"
        format: "int64"
    example:
      event_id: 1
      user_id: 6
      id: 0
  Submissions:
    type: "array"
    items:
      $ref: "#/definitions/Submission"
  Submission:
    type: "object"
    required:
    - "event_id"
    - "team_id"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      event_id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      team_id:
        type: "integer"
        format: "int32"
      video_file:
        type: "string"
      submitted_at:
        type: "string"
      views:
        type: "integer"
        format: "int32"
    example:
      event_id: 6
      submitted_at: "submitted_at"
      id: 0
      team_id: 1
      video_file: "video_file"
      title: "title"
      views: 5
  User:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      logged:
        type: "boolean"
        default: false
      type:
        type: "string"
        enum:
        - "admin"
        - "user"
    example:
      password: "password"
      logged: false
      name: "name"
      id: 0
      type: "admin"
      email: "email"
  Info:
    type: "object"
    properties:
      critical:
        $ref: "#/definitions/Info_critical"
      error:
        $ref: "#/definitions/Info_error"
      warning:
        $ref: "#/definitions/Info_warning"
      info:
        $ref: "#/definitions/Info_info"
    description: "Contains information about the request which could include warnings,\
      \ error messages, and information about any side effects of some operations\
      \ such as which dashboards were added or removed.\n"
    example:
      critical:
        details:
        - "details"
        - "details"
      warning:
        details:
        - "details"
        - "details"
      error:
        details:
        - "details"
        - "details"
      info:
        details:
        - "details"
        - "details"
  Info_critical:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains information about a critical error that has occurred that\
      \ could affect the availability of the service.\n"
    example:
      details:
      - "details"
      - "details"
  Info_error:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains information about a error that has occurred during the\
      \ execution of the requested operation.\n"
    example:
      details:
      - "details"
      - "details"
  Info_warning:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains information that does not affect the results of the requested\
      \ operation but which is out of the ordinary and may require user action or\
      \ investigation. For example, a warning could be used to identify the use of\
      \ deprecated REST API calls.\n"
    example:
      details:
      - "details"
      - "details"
  Info_info:
    properties:
      details:
        type: "array"
        items:
          type: "string"
    description: "Contains details of the requested operation that would be of interest\
      \ to the user. For example, it could include a list of items that have been\
      \ deleted when a containing object is deleted.\n"
    example:
      details:
      - "details"
      - "details"
