# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, title: str=None, description: str=None, event_start_date: str=None, event_end_date: str=None, reg_start_date: str=None, reg_end_date: str=None, created_at: str=None, max_user: int=None, min_user: int=None, location: str=None, accept_file_type: str=None, accept_video_file: bool=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param id: The id of this Event.  # noqa: E501
        :type id: int
        :param title: The title of this Event.  # noqa: E501
        :type title: str
        :param description: The description of this Event.  # noqa: E501
        :type description: str
        :param event_start_date: The event_start_date of this Event.  # noqa: E501
        :type event_start_date: str
        :param event_end_date: The event_end_date of this Event.  # noqa: E501
        :type event_end_date: str
        :param reg_start_date: The reg_start_date of this Event.  # noqa: E501
        :type reg_start_date: str
        :param reg_end_date: The reg_end_date of this Event.  # noqa: E501
        :type reg_end_date: str
        :param created_at: The created_at of this Event.  # noqa: E501
        :type created_at: str
        :param max_user: The max_user of this Event.  # noqa: E501
        :type max_user: int
        :param min_user: The min_user of this Event.  # noqa: E501
        :type min_user: int
        :param location: The location of this Event.  # noqa: E501
        :type location: str
        :param accept_file_type: The accept_file_type of this Event.  # noqa: E501
        :type accept_file_type: str
        :param accept_video_file: The accept_video_file of this Event.  # noqa: E501
        :type accept_video_file: bool
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'description': str,
            'event_start_date': str,
            'event_end_date': str,
            'reg_start_date': str,
            'reg_end_date': str,
            'created_at': str,
            'max_user': int,
            'min_user': int,
            'location': str,
            'accept_file_type': str,
            'accept_video_file': bool
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'event_start_date': 'event_start_date',
            'event_end_date': 'event_end_date',
            'reg_start_date': 'reg_start_date',
            'reg_end_date': 'reg_end_date',
            'created_at': 'created_at',
            'max_user': 'max_user',
            'min_user': 'min_user',
            'location': 'location',
            'accept_file_type': 'accept_file_type',
            'accept_video_file': 'accept_video_file'
        }

        self._id = id
        self._title = title
        self._description = description
        self._event_start_date = event_start_date
        self._event_end_date = event_end_date
        self._reg_start_date = reg_start_date
        self._reg_end_date = reg_end_date
        self._created_at = created_at
        self._max_user = max_user
        self._min_user = min_user
        self._location = location
        self._accept_file_type = accept_file_type
        self._accept_video_file = accept_video_file

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Event.


        :return: The title of this Event.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Event.


        :param title: The title of this Event.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def event_start_date(self) -> str:
        """Gets the event_start_date of this Event.


        :return: The event_start_date of this Event.
        :rtype: str
        """
        return self._event_start_date

    @event_start_date.setter
    def event_start_date(self, event_start_date: str):
        """Sets the event_start_date of this Event.


        :param event_start_date: The event_start_date of this Event.
        :type event_start_date: str
        """

        self._event_start_date = event_start_date

    @property
    def event_end_date(self) -> str:
        """Gets the event_end_date of this Event.


        :return: The event_end_date of this Event.
        :rtype: str
        """
        return self._event_end_date

    @event_end_date.setter
    def event_end_date(self, event_end_date: str):
        """Sets the event_end_date of this Event.


        :param event_end_date: The event_end_date of this Event.
        :type event_end_date: str
        """

        self._event_end_date = event_end_date

    @property
    def reg_start_date(self) -> str:
        """Gets the reg_start_date of this Event.


        :return: The reg_start_date of this Event.
        :rtype: str
        """
        return self._reg_start_date

    @reg_start_date.setter
    def reg_start_date(self, reg_start_date: str):
        """Sets the reg_start_date of this Event.


        :param reg_start_date: The reg_start_date of this Event.
        :type reg_start_date: str
        """

        self._reg_start_date = reg_start_date

    @property
    def reg_end_date(self) -> str:
        """Gets the reg_end_date of this Event.


        :return: The reg_end_date of this Event.
        :rtype: str
        """
        return self._reg_end_date

    @reg_end_date.setter
    def reg_end_date(self, reg_end_date: str):
        """Sets the reg_end_date of this Event.


        :param reg_end_date: The reg_end_date of this Event.
        :type reg_end_date: str
        """

        self._reg_end_date = reg_end_date

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Event.


        :return: The created_at of this Event.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def max_user(self) -> int:
        """Gets the max_user of this Event.


        :return: The max_user of this Event.
        :rtype: int
        """
        return self._max_user

    @max_user.setter
    def max_user(self, max_user: int):
        """Sets the max_user of this Event.


        :param max_user: The max_user of this Event.
        :type max_user: int
        """
        if max_user is None:
            raise ValueError("Invalid value for `max_user`, must not be `None`")  # noqa: E501

        self._max_user = max_user

    @property
    def min_user(self) -> int:
        """Gets the min_user of this Event.


        :return: The min_user of this Event.
        :rtype: int
        """
        return self._min_user

    @min_user.setter
    def min_user(self, min_user: int):
        """Sets the min_user of this Event.


        :param min_user: The min_user of this Event.
        :type min_user: int
        """
        if min_user is None:
            raise ValueError("Invalid value for `min_user`, must not be `None`")  # noqa: E501

        self._min_user = min_user

    @property
    def location(self) -> str:
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: str
        """

        self._location = location

    @property
    def accept_file_type(self) -> str:
        """Gets the accept_file_type of this Event.


        :return: The accept_file_type of this Event.
        :rtype: str
        """
        return self._accept_file_type

    @accept_file_type.setter
    def accept_file_type(self, accept_file_type: str):
        """Sets the accept_file_type of this Event.


        :param accept_file_type: The accept_file_type of this Event.
        :type accept_file_type: str
        """

        self._accept_file_type = accept_file_type

    @property
    def accept_video_file(self) -> bool:
        """Gets the accept_video_file of this Event.


        :return: The accept_video_file of this Event.
        :rtype: bool
        """
        return self._accept_video_file

    @accept_video_file.setter
    def accept_video_file(self, accept_video_file: bool):
        """Sets the accept_video_file of this Event.


        :param accept_video_file: The accept_video_file of this Event.
        :type accept_video_file: bool
        """

        self._accept_video_file = accept_video_file
