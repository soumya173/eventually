# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Reward(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, title: str=None, event_id: int=None, amount: int=None, type: str=None, position: int=None):  # noqa: E501
        """Reward - a model defined in Swagger

        :param id: The id of this Reward.  # noqa: E501
        :type id: int
        :param title: The title of this Reward.  # noqa: E501
        :type title: str
        :param event_id: The event_id of this Reward.  # noqa: E501
        :type event_id: int
        :param amount: The amount of this Reward.  # noqa: E501
        :type amount: int
        :param type: The type of this Reward.  # noqa: E501
        :type type: str
        :param position: The position of this Reward.  # noqa: E501
        :type position: int
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'event_id': int,
            'amount': int,
            'type': str,
            'position': int
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'event_id': 'event_id',
            'amount': 'amount',
            'type': 'type',
            'position': 'position'
        }

        self._id = id
        self._title = title
        self._event_id = event_id
        self._amount = amount
        self._type = type
        self._position = position

    @classmethod
    def from_dict(cls, dikt) -> 'Reward':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Reward of this Reward.  # noqa: E501
        :rtype: Reward
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Reward.


        :return: The id of this Reward.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Reward.


        :param id: The id of this Reward.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Reward.


        :return: The title of this Reward.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Reward.


        :param title: The title of this Reward.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def event_id(self) -> int:
        """Gets the event_id of this Reward.


        :return: The event_id of this Reward.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id: int):
        """Sets the event_id of this Reward.


        :param event_id: The event_id of this Reward.
        :type event_id: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def amount(self) -> int:
        """Gets the amount of this Reward.


        :return: The amount of this Reward.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Reward.


        :param amount: The amount of this Reward.
        :type amount: int
        """

        self._amount = amount

    @property
    def type(self) -> str:
        """Gets the type of this Reward.


        :return: The type of this Reward.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Reward.


        :param type: The type of this Reward.
        :type type: str
        """

        self._type = type

    @property
    def position(self) -> int:
        """Gets the position of this Reward.


        :return: The position of this Reward.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position: int):
        """Sets the position of this Reward.


        :param position: The position of this Reward.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position
