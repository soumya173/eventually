# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Team(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, event_id: int=None, name: str=None, reward_id: int=None, user_ids: List[int]=None, lead_user_id: int=None, type: str=None):  # noqa: E501
        """Team - a model defined in Swagger

        :param id: The id of this Team.  # noqa: E501
        :type id: int
        :param event_id: The event_id of this Team.  # noqa: E501
        :type event_id: int
        :param name: The name of this Team.  # noqa: E501
        :type name: str
        :param reward_id: The reward_id of this Team.  # noqa: E501
        :type reward_id: int
        :param user_ids: The user_ids of this Team.  # noqa: E501
        :type user_ids: List[int]
        :param lead_user_id: The lead_user_id of this Team.  # noqa: E501
        :type lead_user_id: int
        :param type: The type of this Team.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'id': int,
            'event_id': int,
            'name': str,
            'reward_id': int,
            'user_ids': List[int],
            'lead_user_id': int,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'event_id': 'event_id',
            'name': 'name',
            'reward_id': 'reward_id',
            'user_ids': 'user_ids',
            'lead_user_id': 'lead_user_id',
            'type': 'type'
        }

        self._id = id
        self._event_id = event_id
        self._name = name
        self._reward_id = reward_id
        self._user_ids = user_ids
        self._lead_user_id = lead_user_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Team of this Team.  # noqa: E501
        :rtype: Team
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Team.


        :return: The id of this Team.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Team.


        :param id: The id of this Team.
        :type id: int
        """

        self._id = id

    @property
    def event_id(self) -> int:
        """Gets the event_id of this Team.


        :return: The event_id of this Team.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id: int):
        """Sets the event_id of this Team.


        :param event_id: The event_id of this Team.
        :type event_id: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def name(self) -> str:
        """Gets the name of this Team.


        :return: The name of this Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Team.


        :param name: The name of this Team.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def reward_id(self) -> int:
        """Gets the reward_id of this Team.


        :return: The reward_id of this Team.
        :rtype: int
        """
        return self._reward_id

    @reward_id.setter
    def reward_id(self, reward_id: int):
        """Sets the reward_id of this Team.


        :param reward_id: The reward_id of this Team.
        :type reward_id: int
        """

        self._reward_id = reward_id

    @property
    def user_ids(self) -> List[int]:
        """Gets the user_ids of this Team.


        :return: The user_ids of this Team.
        :rtype: List[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids: List[int]):
        """Sets the user_ids of this Team.


        :param user_ids: The user_ids of this Team.
        :type user_ids: List[int]
        """
        if user_ids is None:
            raise ValueError("Invalid value for `user_ids`, must not be `None`")  # noqa: E501

        self._user_ids = user_ids

    @property
    def lead_user_id(self) -> int:
        """Gets the lead_user_id of this Team.


        :return: The lead_user_id of this Team.
        :rtype: int
        """
        return self._lead_user_id

    @lead_user_id.setter
    def lead_user_id(self, lead_user_id: int):
        """Sets the lead_user_id of this Team.


        :param lead_user_id: The lead_user_id of this Team.
        :type lead_user_id: int
        """
        if lead_user_id is None:
            raise ValueError("Invalid value for `lead_user_id`, must not be `None`")  # noqa: E501

        self._lead_user_id = lead_user_id

    @property
    def type(self) -> str:
        """Gets the type of this Team.


        :return: The type of this Team.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Team.


        :param type: The type of this Team.
        :type type: str
        """
        allowed_values = ["judge", "participant"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
